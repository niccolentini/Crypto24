from pwn import *
import base64, json
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import AES

# when there is '' json.loads puts \ in front of the quotes. If you put padding, json.loads creates different characters

# Connect to the server

r = remote('130.192.5.212', 6551)

r.recvuntil(b'\n> ') 

'''                          #final blocks order
{"username": "AA     0:16       1

               \    16:32     #entire block of nothing. \ is inserted because is before the quotes of the next block

"something          32:48       4 

               \    48:64     #entire block of nothing. \ is inserted because is before the quotes of the next block

":                  64:80       5

 true,              80:96       3

    A", "admin":    96:112      2

 false}             112:119     6         # after the } there's padding automatically added


---

 
{"username": "AA               \"something                     \":               true,              A", "admin": false}

 

QUI IL PROBLEMA E' CHE USA JSON.LOADS CHE METTE IL \ PRIMA DELLE " E QUINDI NON POSSO METTERE PADDING PERCHE' JSON.LOADS 
LO CONSIDERA COME CARATTERE QUINDI DEVO FORGIARE IL JSON IN MODO CHE NON CI SIANO " E QUINDI NON CI SIA IL \ PERCHE' 
FACCIO IN MODO CHE IL \ FINISCA ALLA FINE DEL BLOCCO E ALL'INIZIO DI QUELLO SUCCESSIVO CI SIANO LE "" 
'''


payload = 'AA               "something                     ":               true,              A'

r.sendline(payload.encode())

r.recvuntil(b'This is your token: ')

token = base64.b64decode(r.recvline().strip())

r.recvuntil(b'> ')
r.sendline(b'flag')

r.recvuntil(b'What is your token?\n> ')

token = token[:16] + token[96:112] + token[80:96] + token[32:48] + token[64:80] + token[112:128] 
# {"username": "AA  A", "admin":    true,          "something        ":           false}PPPPPPPPPPPPP <-- this is what the server receives to decrypt
# this json has three properties that are username, admin, and something. The server will decrypt this json and check if the admin property is true. 

r.sendline(base64.b64encode(token))


r.interactive()
