from pwn import *


r = remote('130.192.5.212', 6541)

flag = ''

first_block = "A" * 32
second_block = "A" * 30

i = 0

while len(flag) < 16:

    r.recvuntil(b"menu again\n> ")
    r.sendline(b"enc")
    r.recvuntil(b"> ")


    r.sendline((first_block + second_block).encode())


    ciphertext = r.recvline().strip().decode()


    lastbyte = -1
    '''



    flag is 46 bytes long        1 byte      16 bytes block 1     16 bytes block 2          13 bytes block 3 + padding
    [:32]               [32:64]               [64:96]                 [96:128]                  [128:160]
    AAAAAAAAAAAAAAA   AAAAAAAAAAAAAAAC    RYPTO24{59e0868X        XXXXXXXXXXXXXXXX            XXXXXXXXXXXXXPPP                          '''  


    while ciphertext[:32] != ciphertext[32:64]:

        lastbyte += 1
     
        r.recvuntil(b"menu again\n> ")
        r.sendline(b"enc")
        r.recvuntil(b"> ")
        if(len(str(hex(lastbyte))) == 4):
            first_block = first_block[:30] + str(hex(lastbyte))[2:]
        else:
            first_block = first_block[:31] + str(hex(lastbyte))[2:]
        
        r.sendline((first_block + second_block).encode())
        ciphertext = r.recvline().strip().decode()


    flag += chr(lastbyte)
    print(flag)

    first_block = "A" * (30 - 2*(len(flag)%16)) + first_block[-2*(len(flag)%16):] + "AA"
    second_block = "A" * (30 - 2*(len(flag)%16))


print("Decrypting last block")

'''
    flag is 46 bytes long
    now try to decrypt last block
    last block we know the padding technique
    so we can know 15 out of 16 bytes of the last block with a proper input
    so we can bruteforce the last byte

    last block would be like this
    XPPPPPPPPPPPPPP where P is 0x0f
    so the first block should be like this
    XPPP...PPP where P is 0x0f

    after bruteforcing make the padding be 14 bytes
    XFPP...PPP where F is the flag byte found
    and first block should be like this
    XFPP...PPP where F is the flag byte found

    now with 0 input the flag is 46 and the padding is 2
    so to make the padding at the end be 15 bytes we need to add 13 bytes so the total message is 46 + 3 + 16 of first block = 65

'''
padding = 15
second_block_length = 6
first_block = ("0" + str(hex(15))[2:]).upper() * 16
second_block = "A" * 6



while len(flag) < 32:

        pos = len(flag) - len(flag)%16    
        r.recvuntil(b"menu again\n> ")
        r.sendline(b"enc")
        r.recvuntil(b"> ")
    

        r.sendline((first_block + second_block).encode())
    
    
        ciphertext = r.recvline().strip().decode()

        first_byte = -1

        while ciphertext[:32] != ciphertext[128:160]:
             
            first_byte += 1

            r.recvuntil(b"menu again\n> ")
            r.sendline(b"enc")
            r.recvuntil(b"> ")

            if(len(str(hex(first_byte))) == 4):
                first_block = str(hex(first_byte))[2:] + first_block[2:]
            else:
                first_block = str(hex(first_byte))[2:] + first_block[1:]

            r.sendline((first_block + second_block).encode())
            ciphertext = r.recvline().strip().decode()

        flag  = flag[:pos] + chr(first_byte) + flag[pos:]
        print(flag)

        padding -= 1
        second_block_length +=2

        first_block = "AA" + first_block[:2*(len(flag)%16)] + ("0" + str(hex(padding))[2:]) * (15 - len(flag)%16)
        second_block = "A" * second_block_length
        
'''

CRYPTO24{59e08680a-903e9b3e67e6}

We are missing the middle 14 characters of the flag
CRYPTO24{59e0868  XXXXXXXXXXXXXX  0a-903e9b3e67e6}

The block perspective is:

CRYPTO24{59e0868  XXXXXXXXXXXXXX0a  -903e9b3e67e6}22
So we know the last 2 bytes of the second block

PPPPPPPPPPPPPPP AAACRYPTO24{59e0  868XXXXXXXXXXXXX  X0a-903e9b3e67e6  }PPPPPPPPPPPPPPP

'''

print("Decrypting middle block")

first_block = ":".join("{:02x}".format(ord(c)) for c in "A0a-903e9b3e67e6")
first_block = first_block.replace(":", "")

second_block = "A" * 6
second_block_length = 6

first_part = flag[:16]
last_part = flag[16:]

middle_block = ""
while len(flag) < 46:

    r.recvuntil(b"menu again\n> ")
    r.sendline(b"enc")
    r.recvuntil(b"> ")

    r.sendline((first_block + second_block).encode())

    ciphertext = r.recvline().strip().decode()

    first_byte = -1

    while ciphertext[:32] != ciphertext[96:128]:
        
        first_byte += 1

        r.recvuntil(b"menu again\n> ")
        r.sendline(b"enc")
        r.recvuntil(b"> ")

        if(len(str(hex(first_byte))) == 4):
            first_block = str(hex(first_byte))[2:] + first_block[2:]
        else:
            first_block = str(hex(first_byte))[2:] + first_block[1:]

        r.sendline((first_block + second_block).encode())
        ciphertext = r.recvline().strip().decode()

    middle_block = chr(first_byte) + middle_block
    flag = first_part + middle_block + last_part
    print(flag)
    second_block_length += 2

    first_block = "AA" + first_block[:-2]
    second_block = "A" * second_block_length
