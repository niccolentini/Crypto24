from pwn import *

def check_value(IV, ciphertext, byte):
    
    leak = "6d796e616d65737570657261646d696e" # leak = "mynameisuperadmin" in hex

    print(leak)
    r.sendlineafter(b'> ', b'dec')
    r.recvuntil(b'\n> ')
    r.sendline(ciphertext.encode())
    r.recvuntil(b'\n> ')
    r.sendline(IV.encode())

    nextline = r.recvline().strip().decode()
    
    if 'Mh, a normal day.' in nextline or byte != 0:
        r.recvuntil(b'Decrypted: ')
        plaintext = r.recvline().strip().decode()
    else:
        print(nextline)
        r.interactive()


    if leak[2*byte:2*byte+2] == plaintext[2*byte:2*byte+2]: # check if the byte of the plaintext is equal to the byte of the leak
        return True
    return False



# Connect to the server
#  nc 130.192.5.212 6523 

r = connect('130.192.5.212', 6523)

plaintext = "AA" * 16 # 32 bytes of plaintext
r.recvuntil(b'> ')
r.sendline(b'enc')

r.recvuntil(b'What do you want to encrypt?\n> ')
r.sendline(plaintext.encode())


r.recvuntil(b'IV: ')
IV = r.recvline().strip().decode()

r.recvuntil(b'Encrypted: ')
ciphertext = r.recvline().strip().decode()

print('IV:', IV)
print('Ciphertext:', ciphertext)

# modify the IV byte by byte to get the desired decryption xoring with the ciphertext. Questo va bene perhcÃ¨ stiamo usando CBC mode 
# e quindi il ciphertext viene xored con il IV per essere decifrato. Quindi se modifichiamo il IV, modifichiamo il plaintext decifrato

for byte in range(15,-1,-1): # from 15 to 0
    for candidate in range(255, -1 , -1): # from 255 to 0 that are the possible values of a byte 
        
        value = str(hex(candidate))[2:] # convert the value to hex and remove the 0x
        if len(value) == 1: # if the value is less than 16 [0..9,A..F] add a 0 to the left
            value = "0" + value 
        IV = IV[:2*byte] + value + IV[(2*byte)+2:] # modify the byte of the IV with the candidate value. 0 to 2*byte is the part of the IV before the byte, 
        print("IV : " + IV)                        # 2*byte+2 to the end is the part of the IV after the byte

        if check_value(IV, ciphertext, byte):
            print("Value found %d", candidate)
            break

# send ciphertext and IV for decryption

r.recvuntil(b'> ')
r.rsendline(b'dec ')

r.recvuntil(b'\n> ')
r.sendline(ciphertext.encode())
r.recvuntil(b'\n> ')
r.sendline(IV.encode())

r.interactive()